<?php
/**
 * Title: Carousel Element
 *
 * Description: Defines custom post type "carousel".
 *                Defines action to be done when element "carousel" is active.
 *
 * Please do not edit this file. This file is part of the Cyber Chimps Framework and all modifications
 * should be made in a child theme.
 *
 * @category Cyber Chimps Framework
 * @package  Framework
 * @since    1.0
 * @author   CyberChimps
 * @license  http://www.opensource.org/licenses/gpl-license.php GPL v3.0 (or later)
 * @link     http://www.cyberchimps.com/
 */

// Don't load directly
if( !defined( 'ABSPATH' ) ) {
	die( '-1' );
}

if( !class_exists( 'CyberChimpsCarousel' ) ) {
	class CyberChimpsCarousel {

		protected static $instance;
		public $options;

		/* Static Singleton Factory Method */
		public static function instance() {
			if( !isset( self::$instance ) ) {
				$className      = __CLASS__;
				self::$instance = new $className;
			}

			return self::$instance;
		}

		/**
		 * Initializes plugin variables and sets up WordPress hooks/actions.
		 *
		 * @return void
		 */
		protected function __construct() {
			add_action( 'carousel_section', array( $this, 'render_display' ) );
			$this->options = get_option( 'cyberchimps_options' );
			add_action( 'init', array( $this, 'cyberchimps_init_carousel_post_type' ) );
		}

		//Define Custom post type
		function cyberchimps_init_carousel_post_type() {
			register_post_type( 'featured_posts',
			                    array(
				                    'labels'      => array(
					                    'name'               => __( 'Carousel', 'cyberchimps_elements' ),
					                    'singular_name'      => __( 'Carousel item', 'cyberchimps_elements' ),
					                    'add_new_item'       => __( 'Add new Carousel item', 'cyberchimps_elements' ),
					                    'edit_item'          => __( 'Edit Carousel item', 'cyberchimps_elements' ),
					                    'new_item'           => __( 'New Carousel item', 'cyberchimps_elements' ),
					                    'view_item'          => __( 'View Carousel item', 'cyberchimps_elements' ),
					                    'search_items'       => __( 'Search Carousel items', 'cyberchimps_elements' ),
					                    'not_found'          => __( 'No Carousel items found', 'cyberchimps_elements' ),
					                    'not_found_in_trash' => __( 'No Carousel items found in trash', 'cyberchimps_elements' )
				                    ),
				                    'public'      => true,
				                    'show_ui'     => true,
				                    'supports'    => array( 'custom-fields', 'title' ),
				                    'taxonomies'  => array( 'carousel_categories' ),
				                    'has_archive' => false,
				                    'menu_icon'   => get_template_directory_uri() . '/cyberchimps/lib/images/custom-types/carousel.png',
				                    'rewrite'     => false
			                    )
			);

			$labels = array(
				'name'              => _x( 'Carousel Categories', 'taxonomy general name', 'cyberchimps_elements' ),
				'singular_name'     => _x( 'Carousel Catergory', 'taxonomy singular name', 'cyberchimps_elements' ),
				'search_items'      => __( 'Search Carousel', 'cyberchimps_elements' ),
				'all_items'         => __( 'All Carousels', 'cyberchimps_elements' ),
				'parent_item'       => __( 'Carousel Category', 'cyberchimps_elements' ),
				'parent_item_colon' => __( 'Carousel Category:', 'cyberchimps_elements' ),
				'edit_item'         => __( 'Edit Carousel Category', 'cyberchimps_elements' ),
				'update_item'       => __( 'Update Carousel Category', 'cyberchimps_elements' ),
				'add_new_item'      => __( 'Add New Carousel Category', 'cyberchimps_elements' ),
				'new_item_name'     => __( 'New Carousel Category Name', 'cyberchimps_elements' ),
				'menu_name'         => __( 'Carousel Category', 'cyberchimps_elements' )
			);

			register_taxonomy( 'carousel_categories', array( 'featured_posts' ), array(
				'public'            => true,
				'show_in_nav_menus' => false,
				'hierarchical'      => true,
				'labels'            => $labels,
				'show_ui'           => true
			) );

			/**
			 * Set up Meta Boxes on Box custom post type
			 */

			$carousel_fields = array( array(
				'type'  => 'single_image',
				'id'    => 'post_image',
				'class' => '',
				'name'  => __( 'Featured Post Image', 'cyberchimps_elements' ),
				'std'   => ''
			),
				array(
					'type'  => 'text',
					'id'    => 'post_url',
					'class' => '',
					'name'  => __( 'Featured Post URL', 'cyberchimps_elements' )
				),
				array(
					'type'  => 'checkbox',
					'id'    => 'carousel_lightbox_toggle',
					'class' => 'checkbox',
					'name'  => __( 'Lightbox', 'cyberchimps_elements' ),
					'std'   => 1
				),
				array(
					'type'  => 'reorder',
					'id'    => 'reorder_id',
					'class' => '',
					'name'  => __( 'Reorder Name', 'cyberchimps_elements' )
				)

			);
			/*
			 * configure your meta box
			 */
			$carousel_config = array(
				'id'             => 'carousel_options', // meta box id, unique per meta box
				'title'          => __( 'Featured Post Carousel', 'cyberchimps_elements' ), // meta box title
				'pages'          => array( 'featured_posts' ), // post types, accept custom post types as well, default is array('post'); optional
				'context'        => 'normal', // where the meta box appear: normal (default), advanced, side; optional
				'priority'       => 'high', // order of meta box: high (default), low; optional
				'fields'         => $carousel_fields, // list of meta fields (can be added by field arrays)
				'local_images'   => false, // Use local or hosted images (meta box images for add/remove)
				'use_with_theme' => true //change path if used with theme set to true, false for a plugin or anything else for a custom path(default false).
			);

			/*
			 * Initiate your meta box
			 */
			$carousel_meta = new Cyberchimps_Meta_Box( $carousel_config );

			/**
			 * Set up Meta Boxes on Page
			 *
			 */

			$carousel_terms = get_terms( 'carousel_categories', 'hide_empty=0' );
			if( !is_wp_error( $carousel_terms ) ) {
				foreach( $carousel_terms as $term ) {
					$carousel_options[$term->slug] = $term->name;
				}
			}
			else {
				$carousel_options = null;
			}

			$page_fields = array(
				array(
					'type'    => 'select',
					'id'      => 'carousel_category',
					'class'   => '',
					'name'    => __( 'Carousel Category', 'cyberchimps_elements' ),
					'options' => ( isset( $carousel_options ) ) ? $carousel_options : array( 'cc_no_options' => __( 'You need to create a Category', 'cyberchimps_core' ) )
				)

			);
			/*
			 * configure your meta box
			 */
			$page_config = array(
				'id'             => 'carousel_section_options', // meta box id, unique per meta box
				'title'          => __( 'Carousel Options', 'cyberchimps_elements' ), // meta box title
				'pages'          => array( 'page' ), // post types, accept custom post types as well, default is array('post'); optional
				'context'        => 'normal', // where the meta box appear: normal (default), advanced, side; optional
				'priority'       => 'high', // order of meta box: high (default), low; optional
				'fields'         => $page_fields, // list of meta fields (can be added by field arrays)
				'local_images'   => false, // Use local or hosted images (meta box images for add/remove)
				'use_with_theme' => true //change path if used with theme set to true, false for a plugin or anything else for a custom path(default false).
			);

			/*
			 * Initiate your meta box
			 */
			$page_meta = new Cyberchimps_Meta_Box( $page_config );
		}

		/**
		 * Puts markup for carousel
		 *
		 * @return void
		 */
		public function render_display() {

			// Get the default image of carousel
			$default = get_template_directory_uri() . apply_filters( 'cyberchimps_carousel_img', '/cyberchimps/lib/images/carousel.jpg' );

			// Initialize variable that holds markup string to be echoed
			$out = '';

			if( is_page() ) {
				$customcategory = get_post_meta( get_the_ID(), 'carousel_category', true );
			}
			else {
				if( isset( $this->options['carousel_categories'] ) ) {
					$customcategory_obj = get_term( $this->options['carousel_categories'], 'carousel_categories' );
					$customcategory     = $customcategory_obj->slug;
				}
				else {
					$customcategory = '';
				}
			}
			?>
			<div id="container" class="row-fluid">
				<div id="carousel" class="es-carousel-wrapper">
					<div class="es-carousel">

						<?php
						$args = array(
							'numberposts'         => 50,
							'offset'              => 0,
							'carousel_categories' => $customcategory,
							'orderby'             => 'post_date',
							'order'               => 'ASC',
							'post_type'           => 'featured_posts',
							'post_status'         => 'publish',
							'suppress_filters'    => false
						);

						// HS set total posts so the loop can be finished correctly, this needs to be changed when we use get_posts()
						$carousel_posts = get_posts( $args );

						// If custom there is any post in custom post type carousel then display them
						if( $carousel_posts ) {
							$out .= '<ul>';
							foreach( $carousel_posts as $post ) {

								/* Post-specific variables */
								$image    = get_post_meta( $post->ID, 'post_image', true );
								$link     = ( get_post_meta( $post->ID, 'post_url', true ) != '' ) ? get_post_meta( $post->ID, 'post_url', true ) : get_post_meta( $post->ID, 'post_image', true );
								$lightbox = get_post_meta( $post->ID, 'carousel_lightbox_toggle', true );
								$title    = $post->post_title;

								// Added lightbox if toggle is on no URL is given.
								$rel = ( ( $link == $image ) && $lightbox ) ? 'rel="cyberchimps-lightbox"' : '';

								// For old carousels where lightbox option would not be saved in databse.
								$rel = ( ( $link == $image ) && ( $lightbox == '' ) ) ? 'rel="cyberchimps-lightbox"' : $rel;

								// Added lightbox if toggle is on no URL is given.
								$rel = ( ( $link == $image ) && $lightbox ) ? 'rel="cyberchimps-lightbox"' : '';
								
								// For old carousels where lightbox option would not be saved in databse.
								$rel = ( ( $link == $image ) && ( $lightbox == '' ) ) ? 'rel="cyberchimps-lightbox"' : $rel;
								
								// Set image to default if no image is supplied
								if( $image == '' ) {
									$image = $default;
								}

								$out .= '<li>';
								$out .= '<a href="' . esc_url( $link ) . '" ' . $rel . 'title="' . $title . '"><img src="' . $image . '" alt="' . $title . '" />';
								$out .= '<div class="carousel-captions">'. $title .'</div></a>';
								$out .= '</li>';
							}
							$out .= '</ul>';
						}
						else {
							// If no posts are there in custom post type carosel then display default image 6 times
							$out .= '<ul>';
							$default_counter = 0;
							for( $default_counter = 0; $default_counter < 6; $default_counter++ ) {
								$out .= '<li>';
								$out .= '<a href="' . $default . '" rel="cyberchimps-lightbox"><img src="' . $default . '" alt="Post 1"/></a>';
								$out .= '<div class="carousel-captions">' . apply_filters( "cyberchimps_current_theme_name", "CyberChimps" ) . '</div>';
								$out .= '</li>';
							}
							$out .= '</ul>';
						}

						echo $out;
						?>

					</div>
					<!-- .es-carousel -->
				</div>
				<!-- #carousel -->
			</div><!-- #container -->
		<?php
		}
	}
}
CyberChimpsCarousel::instance();